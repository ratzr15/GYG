//
//  ListOrdersViewControllerTests.swift
//  CleanStore
//
//  Created by Raymond Law on 10/31/15.
//  Copyright (c) 2015 Raymond Law. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Project
import XCTest

class ViewControllerTests: XCTestCase
{
  // MARK: - Subject under test
  
  var sut: ViewController!
  var window: UIWindow!
  
  // MARK: - Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupListViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: - Test setup
  
  func setupListViewController()
  {
    
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "ViewController") as? ViewController
    
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: - Test doubles
  
  class ListBusinessLogicSpy: FetchDataBusinessLogic
  {
    
    var items: [ListViewModelItem]?
    
    // MARK: Method call expectations
    
    var fetchDataCalled = false
    
    // MARK: Spied methods
    
    func fetchData(request: List.Fetch.Request) {
        fetchDataCalled = true
    }

  }
  
  class TableViewSpy: UITableView
  {
    // MARK: Method call expectations
    
    var reloadDataCalled = false
    
    // MARK: Spied methods
    
    override func reloadData()
    {
      reloadDataCalled = true
    }
  }
  
  // MARK: - Tests
  
  func testShouldFetchOrdersWhenViewDidAppear()
  {
    // Given
    let listBusinessLogicSpy = ListBusinessLogicSpy()
    sut.interactor = listBusinessLogicSpy
    loadView()
    
    // When
    sut.viewDidAppear(true)
    
    XCTAssertNotNil(sut.tableView,
                    "Controller should have a tableview")

    // Then
    XCTAssert(listBusinessLogicSpy.fetchDataCalled, "Should fetch data right after the view appears")
  }
  
  func testShouldDisplayFetchedOrders()
  {
    // Given
    let tableViewSpy = TableViewSpy()
    sut.tableView = tableViewSpy
    
    // When
    let displayedReviews = [List.Fetch.ViewModel.ListItem.init(rating: "5", message: "Asthala vista!", title: "Extravagenza", author: "Berlin newbie", photo: "photo.jpg", id: "0001")]
    let viewModel = List.Fetch.ViewModel(datas: displayedReviews)
    
    XCTAssertNotNil(sut.tableView,
                    "Controller should have a tableview")

    sut.displayFetchedData(viewModel: viewModel)
    
    // Then
    XCTAssert(tableViewSpy.reloadDataCalled, "Displaying fetched data should reload the table view")
  }
  
  func testNumberOfSectionsInTableViewShouldAlwaysBeOne()
  {
    // Given
    let tableView = sut.tableView
    
    // When
    let numberOfSections = sut.numberOfSections(in: tableView ??  UITableView())
    
    // Then
    XCTAssertEqual(numberOfSections, 1, "The number of table view sections should always be 1")
  }
  
  func testNumberOfRowsInAnySectionShouldEqaulNumberOfOrdersToDisplay()
  {
    // Given
    let tableView = sut.tableView
    let testDisplayedReviews = [List.Fetch.ViewModel.ListItem.init(rating: "5", message: "Asthala vista!", title: "Extravagenza", author: "Berlin newbie", photo: "photo.jpg", id: "0001")]
    sut.items = testDisplayedReviews
    
    // When
    let numberOfRows = sut.tableView(tableView ?? UITableView(), numberOfRowsInSection: 0)
    
    // Then
    XCTAssertEqual(numberOfRows, testDisplayedReviews.count, "The number of table view rows should equal the number of orders to display")
  }
  
  func testShouldConfigureTableViewCellToDisplayOrder()
  {
    // Given
    let tableView = sut.tableView
    let testDisplayedReviews = [List.Fetch.ViewModel.ListItem.init(rating: "5", message: "Asthala vista!", title: "Extravagenza", author: "Berlin newbie", photo: "photo.jpg", id: "0001")]
    sut.items = testDisplayedReviews
    
    // When
    let indexPath = IndexPath(row: 0, section: 0)
    let cell = sut.tableView(tableView ?? UITableView(), cellForRowAt: indexPath)
    
    // Then
    XCTAssertEqual(cell.textLabel?.text, "6/29/07", "A properly configured table view cell should display the order date")
    XCTAssertEqual(cell.detailTextLabel?.text, "$1.23", "A properly configured table view cell should display the order total")
  }
}
